// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Violetum.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    internal class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Category", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("AuthorId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .HasColumnType("ntext");

                b.Property<string>("Image")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("nvarchar(max)")
                    .HasDefaultValue("Category/no-image.jpg");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("AuthorId");

                b.HasIndex("Name")
                    .IsUnique()
                    .HasFilter("[Name] IS NOT NULL");

                b.ToTable("Categories");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Comment", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("AuthorId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Content")
                    .HasColumnType("ntext");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("ParentId")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PostId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("AuthorId");

                b.HasIndex("PostId");

                b.ToTable("Comments");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.CommentVote", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("CommentId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<int>("Direction")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("CommentId");

                b.HasIndex("UserId");

                b.ToTable("CommentVotes");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Follower", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("FollowerUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("UserToFollowId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("FollowerUserId");

                b.HasIndex("UserToFollowId");

                b.ToTable("Followers");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Post", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("AuthorId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("CategoryId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Content")
                    .HasColumnType("ntext");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("AuthorId");

                b.HasIndex("CategoryId");

                b.ToTable("Posts");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.PostVote", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<int>("Direction")
                    .HasColumnType("int");

                b.Property<string>("PostId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("PostId");

                b.HasIndex("UserId");

                b.ToTable("PostVotes");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.User", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("BirthDate")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("FirstName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Gender")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Image")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("nvarchar(max)")
                    .HasDefaultValue("Category/no-image.jpg");

                b.Property<string>("LastName")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Violetum.Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Violetum.Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Violetum.Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Violetum.Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Category", b =>
            {
                b.HasOne("Violetum.Domain.Entities.User", "Author")
                    .WithMany()
                    .HasForeignKey("AuthorId");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Comment", b =>
            {
                b.HasOne("Violetum.Domain.Entities.User", "Author")
                    .WithMany()
                    .HasForeignKey("AuthorId");

                b.HasOne("Violetum.Domain.Entities.Post", "Post")
                    .WithMany("Comments")
                    .HasForeignKey("PostId");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.CommentVote", b =>
            {
                b.HasOne("Violetum.Domain.Entities.Comment", "Comment")
                    .WithMany("CommentVotes")
                    .HasForeignKey("CommentId");

                b.HasOne("Violetum.Domain.Entities.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Follower", b =>
            {
                b.HasOne("Violetum.Domain.Entities.User", "FollowerUser")
                    .WithMany()
                    .HasForeignKey("FollowerUserId");

                b.HasOne("Violetum.Domain.Entities.User", "UserToFollow")
                    .WithMany()
                    .HasForeignKey("UserToFollowId");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.Post", b =>
            {
                b.HasOne("Violetum.Domain.Entities.User", "Author")
                    .WithMany()
                    .HasForeignKey("AuthorId");

                b.HasOne("Violetum.Domain.Entities.Category", "Category")
                    .WithMany("Posts")
                    .HasForeignKey("CategoryId");
            });

            modelBuilder.Entity("Violetum.Domain.Entities.PostVote", b =>
            {
                b.HasOne("Violetum.Domain.Entities.Post", "Post")
                    .WithMany("PostVotes")
                    .HasForeignKey("PostId");

                b.HasOne("Violetum.Domain.Entities.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId");
            });
#pragma warning restore 612, 618
        }
    }
}